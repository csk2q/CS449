using System.Reflection;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Headless.XUnit;
using Avalonia.Interactivity;
using SOS_Game;
using SOS_Game.Logic;

namespace UnitTestProject;

public class ACUnitTests
{
    // Initially generated by ChatGPT for AC 4.1 , heavily edited by me
    // Formerly called PlayerMakesMove_PlacesSAndSwitchesTurn by ChatGPT
    [AvaloniaTheory]
    [InlineData(Player.BlueLeft, TileType.S)]
    [InlineData(Player.BlueLeft, TileType.O)]
    [InlineData(Player.RedRight, TileType.S)]
    [InlineData(Player.RedRight, TileType.O)]
    public void TestTilePlacementAndTurnChange(Player player, TileType tileSelection)
    {
        //Run test for both game modes
        InnerTest(GameType.Simple);
        InnerTest(GameType.General);
        return;

        void InnerTest(GameType gameType)
        {
            // Instantiate the game window
            var window = new MainWindow();
            window.Show();

            // Set game mode selection
            var simpleRadioButton = window.FindControl<RadioButton>("SimpleGameRadioButton");
            Assert.NotNull(simpleRadioButton);
            var generalRadioButton = window.FindControl<RadioButton>("GeneralGameRadioButton");
            Assert.NotNull(generalRadioButton);
            if (GameType.Simple == gameType)
            {
                simpleRadioButton.IsChecked = true;
                generalRadioButton.IsChecked = false;
            }
            else if (GameType.General == gameType)
            {
                simpleRadioButton.IsChecked = false;
                generalRadioButton.IsChecked = true;
            }

            // Start a new game and create game board
            window.StartNewGame(null, new RoutedEventArgs());

            // Ensure the game grid exists and has tiles
            var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
            Assert.NotNull(gameGrid);
            Assert.NotEmpty(gameGrid.Children);

            // Set player turn
            var gameBoardFieldInfo =
                typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
            var playerTurnProperty = typeof(GameBoard).GetProperty("PlayerTurn",
                BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            Assert.NotNull(gameBoardFieldInfo);
            Assert.NotNull(playerTurnProperty);
            var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;
            playerTurnProperty.SetValue(gameBoard, player);

            // Simulate selecting tileSelection for the player 
            RadioButton? sRadioButton = null;
            RadioButton? oRadioButton = null;
            if (player == Player.BlueLeft)
            {
                sRadioButton = window.FindControl<RadioButton>("BlueSChoice");
                oRadioButton = window.FindControl<RadioButton>("BlueOChoice");
            }
            else if (player == Player.RedRight)
            {
                sRadioButton = window.FindControl<RadioButton>("RedSChoice");
                oRadioButton = window.FindControl<RadioButton>("RedOChoice");
            }

            Assert.NotNull(sRadioButton);
            Assert.NotNull(oRadioButton);

            if (tileSelection == TileType.O)
            {
                sRadioButton.IsChecked = false;
                oRadioButton.IsChecked = true;
            }
            else if (tileSelection == TileType.S)
            {
                sRadioButton.IsChecked = true;
                oRadioButton.IsChecked = false;
            }

            // Simulate a click on an empty tile (assuming the board has at least one)
            var emptyTile = gameGrid.Children.OfType<Button>().First(b => (string)b.Content! == "");
            Assert.NotNull(emptyTile);

            // Trigger click
            emptyTile.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));

            // Assert that the tile content is now the tileSelection
            Assert.Equal(Enum.GetName(tileSelection), emptyTile.Content);

            // Assert that the player's turn has switched
            Assert.NotEqual(player, gameBoard.PlayerTurn);
        }
    }

    [AvaloniaTheory]
    [InlineData(Player.BlueLeft, TileType.S)]
    [InlineData(Player.BlueLeft, TileType.O)]
    [InlineData(Player.RedRight, TileType.S)]
    [InlineData(Player.RedRight, TileType.O)]
    public void TestTilePlacementForOccupiedTile(Player player, TileType tileSelection)
    {
        //Run test for both game modes
        InnerTest(GameType.Simple);
        InnerTest(GameType.General);
        return;

        void InnerTest(GameType gameType)
        {
            // Instantiate the game window
            var window = new MainWindow();
            window.Show();

            // Set game mode selection
            var simpleRadioButton = window.FindControl<RadioButton>("SimpleGameRadioButton");
            Assert.NotNull(simpleRadioButton);
            var generalRadioButton = window.FindControl<RadioButton>("GeneralGameRadioButton");
            Assert.NotNull(generalRadioButton);
            if (GameType.Simple == gameType)
            {
                simpleRadioButton.IsChecked = true;
                generalRadioButton.IsChecked = false;
            }
            else if (GameType.General == gameType)
            {
                simpleRadioButton.IsChecked = false;
                generalRadioButton.IsChecked = true;
            }

            // Start a new game and create game board
            window.StartNewGame(null, new RoutedEventArgs());

            // Set player turn
            var gameBoardFieldInfo =
                typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
            var playerTurnProperty = typeof(GameBoard).GetProperty("PlayerTurn",
                BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            Assert.NotNull(gameBoardFieldInfo);
            Assert.NotNull(playerTurnProperty);
            var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;
            playerTurnProperty.SetValue(gameBoard, player);

            // Simulate selecting tileSelection for the first player 
            RadioButton? sFirstRadioButton = null;
            RadioButton? oFirstRadioButton = null;
            RadioButton? sSecondRadioButton = null;
            RadioButton? oSecondRadioButton = null;
            if (player == Player.BlueLeft)
            {
                sFirstRadioButton = window.FindControl<RadioButton>("BlueSChoice");
                oFirstRadioButton = window.FindControl<RadioButton>("BlueOChoice");
                sSecondRadioButton = window.FindControl<RadioButton>("RedSChoice");
                oSecondRadioButton = window.FindControl<RadioButton>("RedOChoice");
            }
            else if (player == Player.RedRight)
            {
                sFirstRadioButton = window.FindControl<RadioButton>("RedSChoice");
                oFirstRadioButton = window.FindControl<RadioButton>("RedOChoice");
                sSecondRadioButton = window.FindControl<RadioButton>("BlueSChoice");
                oSecondRadioButton = window.FindControl<RadioButton>("BlueOChoice");
            }

            // Ensure we have all radio buttons 
            Assert.NotNull(sFirstRadioButton);
            Assert.NotNull(oFirstRadioButton);
            Assert.NotNull(sSecondRadioButton);
            Assert.NotNull(oSecondRadioButton);

            // Set the value of the tile selection
            if (tileSelection == TileType.O)
            {
                sFirstRadioButton.IsChecked = false;
                oFirstRadioButton.IsChecked = true;
                sSecondRadioButton.IsChecked = true;
                oSecondRadioButton.IsChecked = false;
            }
            else if (tileSelection == TileType.S)
            {
                sFirstRadioButton.IsChecked = true;
                oFirstRadioButton.IsChecked = false;
                sSecondRadioButton.IsChecked = false;
                oSecondRadioButton.IsChecked = true;
            }
            
            // Ensure the game grid exists and has tiles
            var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
            Assert.NotNull(gameGrid);
            Assert.NotEmpty(gameGrid.Children);

            // Simulate a click on an empty tile (assuming the board has at least one)
            var emptyTile = gameGrid.Children.OfType<Button>().First(b => (string)b.Content! == "");
            Assert.NotNull(emptyTile);

            // Trigger click
            emptyTile.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));

            // Assert that the tile content is now the tileSelection
            Assert.Equal(Enum.GetName(tileSelection), emptyTile.Content);

            // Assert that the player's turn has switched
            Assert.NotEqual(player, gameBoard.PlayerTurn);

            // Trigger click to try to place on that tile again
            emptyTile.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));

            // Ensure that the tile selection is unchanged
            Assert.Equal(Enum.GetName(tileSelection), emptyTile.Content);
            
            // Verify that it is still the second player's turn
            if (player == Player.BlueLeft)
            {
                Assert.Equal(Player.RedRight, playerTurnProperty.GetValue(gameBoard));
            }
            else if (player == Player.RedRight)
            {
                Assert.Equal(Player.BlueLeft, playerTurnProperty.GetValue(gameBoard));
            }
        }
    }

    // Initially generated by ChatGPT for AC 3.1, heavily edited by me
    // Formerly called CreateBoard_ValidSize_ClearsExistingBoardAndCreatesNew() by ChatGPT
    [AvaloniaFact]
    public void TestValidBoardSizes()
    {
        // Check for every valid board size
        for (decimal size = GameBoard.MinBoardSize; size < GameBoard.MaxBoardSize + 1; size++)
        {
            // Instantiate the game window
            var window = new MainWindow();
            window.Show();

            // Ensure the game grid exists and is not empty
            var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
            Assert.NotNull(gameGrid);
            Assert.NotEmpty(gameGrid.Children);

            //Set the board size of BoardSizeNumericUpDown.Value
            var boardSizeNumericUpDownInfo = typeof(MainWindow).GetField("BoardSizeNumericUpDown",
                BindingFlags.NonPublic | BindingFlags.Instance);
            Assert.NotNull(boardSizeNumericUpDownInfo);
            var sizeValueInfo = typeof(NumericUpDown).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance);
            Assert.NotNull(sizeValueInfo);
            sizeValueInfo.SetValue(boardSizeNumericUpDownInfo.GetValue(window), size);

            // Start a new default game and create game board
            window.StartNewGame(null, new RoutedEventArgs());

            // Assert that the board only has fresh tiles now
            foreach (var tile in gameGrid.Children)
            {
                // Empty tiles are equal to the empty string
                Assert.IsType<Button>(tile);
                Assert.Equal((tile as Button)?.Content, "");
            }

            // Assert that a new board of the given size is created
            Assert.Equal(gameGrid.Children.Count, size * size);
        }
    }

    [AvaloniaTheory]
    [InlineData(-200)]
    [InlineData(2)]
    [InlineData(0)]
    [InlineData(3.333)]
    [InlineData(9999)]
    [InlineData(90.93)]
    [InlineData(31)]
    [InlineData(32)]
    public void TestInvalidBoardSizes(decimal invalidSize)
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Ensure the game grid exists and is not empty
        var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameGrid);
        Assert.NotEmpty(gameGrid.Children);

        //Set the board size of BoardSizeNumericUpDown.Value
        var boardSizeNumericUpDownInfo =
            typeof(MainWindow).GetField("BoardSizeNumericUpDown", BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(boardSizeNumericUpDownInfo);
        var sizeValueInfo = typeof(NumericUpDown).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(sizeValueInfo);
        sizeValueInfo.SetValue(boardSizeNumericUpDownInfo.GetValue(window), invalidSize);

        // Start a new default game and create game board
        window.StartNewGame(null, new RoutedEventArgs());

        // Get cached size by GameBoard is equal
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        var sizeInfo = typeof(GameBoard).GetField("size", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(gameBoardFieldInfo);
        Assert.NotNull(sizeInfo);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;

        // Get cached size by MainWindow
        var currentBoardSizeInfo =
            typeof(MainWindow).GetField("currentBoardSize", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(currentBoardSizeInfo);

        // Assert that a new board of the given size is created
        if (invalidSize < GameBoard.MinBoardSize)
        {
            Assert.Equal((int)(GameBoard.MinBoardSize * GameBoard.MinBoardSize), gameGrid.Children.Count);
            Assert.Equal((int)GameBoard.MinBoardSize, sizeInfo.GetValue(gameBoard));
            Assert.Equal((int)GameBoard.MinBoardSize, currentBoardSizeInfo.GetValue(window));
        }
        else if (invalidSize > GameBoard.MaxBoardSize)
        {
            Assert.Equal((int)(GameBoard.MaxBoardSize * GameBoard.MaxBoardSize), gameGrid.Children.Count);
            Assert.Equal((int)GameBoard.MaxBoardSize, sizeInfo.GetValue(gameBoard));
            Assert.Equal((int)GameBoard.MaxBoardSize, currentBoardSizeInfo.GetValue(window));
        }
        else
        {
            // Check if the valid value was rounded correctly
            var roundedSize = (int)invalidSize;
            Assert.Equal(roundedSize * roundedSize, gameGrid.Children.Count);
            Assert.Equal(roundedSize, sizeInfo.GetValue(gameBoard));
            Assert.Equal(roundedSize, currentBoardSizeInfo.GetValue(window));
        }
    }

    [AvaloniaFact]
    public void TestChangeBoardSize()
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Start a new default game
        window.StartNewGame(null, new RoutedEventArgs());

        //Get the board size of BoardSizeNumericUpDown.Value
        var boardSizeNumericUpDownInfo =
            typeof(MainWindow).GetField("BoardSizeNumericUpDown", BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(boardSizeNumericUpDownInfo);
        var sizeValueInfo = typeof(NumericUpDown).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(sizeValueInfo);
        var startingSize = (decimal)sizeValueInfo.GetValue(boardSizeNumericUpDownInfo.GetValue(window))!;

        //Set the board size of BoardSizeNumericUpDown.Value
        decimal newSize = 9;
        sizeValueInfo.SetValue(boardSizeNumericUpDownInfo.GetValue(window), newSize);


        // Check that cached size by GameBoard is unchanged
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        var sizeInfo = typeof(GameBoard).GetField("size", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(gameBoardFieldInfo);
        Assert.NotNull(sizeInfo);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;
        Assert.Equal((int)startingSize, sizeInfo.GetValue(gameBoard));

        // Check that cached size by MainWindow is unchanged
        var currentBoardSizeInfo =
            typeof(MainWindow).GetField("currentBoardSize", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(currentBoardSizeInfo);
        Assert.Equal((int)startingSize, currentBoardSizeInfo.GetValue(window));

        // Check that current size of the game grid  is unchanged
        var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameGrid);
        Assert.Equal(startingSize * startingSize, gameGrid.Children.Count);
    }
    
    // Initially generated by ChatGPT for AC 1.2, edited by me
    // Formerly called DefaultBoardSizeUsed_WhenSizeNotChanged by ChatGPT
    [AvaloniaFact]
    public void TestDefaultBoardSize()
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Start a new game without changing the board size
        window.StartNewGame(null, new RoutedEventArgs());

        // Use reflection to access the private fields
        var gameBoardField = typeof(MainWindow).GetField("gameBoard", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        var currentBoardSizeField = typeof(MainWindow).GetField("currentBoardSize", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        
        // Get the gameBoard object and currentBoardSize
        var gameBoard = gameBoardField.GetValue(window);
        var currentBoardSize = (int)currentBoardSizeField.GetValue(window); // Cast currentBoardSize to int

        // Access the GameBoard size field using reflection
        var sizeField = gameBoard.GetType().GetField("size", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        var gameBoardSize = (int)sizeField.GetValue(gameBoard); // Cast size to int

        // Assert that the currentBoardSize and gameBoardSize are equal to the default size
        int defaultSize = (int)GameBoard.DefaultBoardSize; // Cast DefaultBoardSize to int
        Assert.Equal(defaultSize, currentBoardSize);
        Assert.Equal(defaultSize, gameBoardSize);
        
        // Access the GameBoardGrid UI element
        var gameBoardGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameBoardGrid);

        // Check that the GameBoardGrid contains the correct number of child elements (defaultSize * defaultSize)
        int expectedTileCount = defaultSize * defaultSize;
        Assert.Equal(expectedTileCount, gameBoardGrid.Children.Count);
    }



    [AvaloniaTheory]
    [InlineData(GameType.Simple)]
    [InlineData(GameType.General)]
    public void TestStartingGameType(GameType gameType)
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Set game mode selection
        var simpleRadioButton = window.FindControl<RadioButton>("SimpleGameRadioButton");
        Assert.NotNull(simpleRadioButton);
        var generalRadioButton = window.FindControl<RadioButton>("GeneralGameRadioButton");
        Assert.NotNull(generalRadioButton);
        if (GameType.Simple == gameType)
        {
            simpleRadioButton.IsChecked = true;
            generalRadioButton.IsChecked = false;
        }
        else if (GameType.General == gameType)
        {
            simpleRadioButton.IsChecked = false;
            generalRadioButton.IsChecked = true;
        }

        // Start a new game and create game board
        window.StartNewGame(null, new RoutedEventArgs());

        // Ensure the game grid exists and has tiles
        var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameGrid);
        Assert.NotEmpty(gameGrid.Children);

        // Check the game type
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(gameBoardFieldInfo);
        var gameTypeInfo = typeof(GameBoard).GetField("gameType", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(gameTypeInfo);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;
        Assert.Equal(gameType, gameTypeInfo.GetValue(gameBoard));
    }


    [AvaloniaTheory]
    [InlineData(GameType.Simple)]
    [InlineData(GameType.General)]
    public void TestStartingPlayerIsBlueLeft(GameType gameType)
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Set game mode selection
        var simpleRadioButton = window.FindControl<RadioButton>("SimpleGameRadioButton");
        Assert.NotNull(simpleRadioButton);
        var generalRadioButton = window.FindControl<RadioButton>("GeneralGameRadioButton");
        Assert.NotNull(generalRadioButton);
        if (GameType.Simple == gameType)
        {
            simpleRadioButton.IsChecked = true;
            generalRadioButton.IsChecked = false;
        }
        else if (GameType.General == gameType)
        {
            simpleRadioButton.IsChecked = false;
            generalRadioButton.IsChecked = true;
        }

        // Start a new game and create game board
        window.StartNewGame(null, new RoutedEventArgs());

        // Get player turn variable
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        var playerTurnProperty = typeof(GameBoard).GetProperty("PlayerTurn",
            BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        Assert.NotNull(gameBoardFieldInfo);
        Assert.NotNull(playerTurnProperty);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;

        //Check that it is Blue/Left Player's turn
        Assert.Equal(Player.BlueLeft, playerTurnProperty.GetValue(gameBoard));
    }

    [AvaloniaTheory]
    [InlineData(GameType.Simple)]
    [InlineData(GameType.General)]
    public void TestReusingGameMode(GameType gameType)
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Set game mode selection
        var simpleRadioButton = window.FindControl<RadioButton>("SimpleGameRadioButton");
        Assert.NotNull(simpleRadioButton);
        var generalRadioButton = window.FindControl<RadioButton>("GeneralGameRadioButton");
        Assert.NotNull(generalRadioButton);
        if (GameType.Simple == gameType)
        {
            simpleRadioButton.IsChecked = true;
            generalRadioButton.IsChecked = false;
        }
        else if (GameType.General == gameType)
        {
            simpleRadioButton.IsChecked = false;
            generalRadioButton.IsChecked = true;
        }

        // Start a new game
        window.StartNewGame(null, new RoutedEventArgs());

        // Ensure the game grid exists and has tiles
        var gameGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameGrid);
        Assert.NotEmpty(gameGrid.Children);

        // Check the game type is the same as the starting value
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(gameBoardFieldInfo);
        var gameTypeInfo = typeof(GameBoard).GetField("gameType", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(gameTypeInfo);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;
        Assert.Equal(gameType, gameTypeInfo.GetValue(gameBoard));

        //Clear game grid so we can check later
        gameGrid.Children.Clear();

        // Start a second new game 
        window.StartNewGame(null, new RoutedEventArgs());

        // Ensure the game grid has been repopulated
        Assert.NotEmpty(gameGrid.Children);

        // Check the game type is the same as the starting value
        Assert.Equal(gameType, gameTypeInfo.GetValue(gameBoard));
    }

    [AvaloniaTheory]
    [InlineData(GameType.Simple)]
    [InlineData(GameType.General)]
    public void TestGameTypeDoesNotAffectCurGame(GameType gameType)
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Set game mode selection
        var simpleRadioButton = window.FindControl<RadioButton>("SimpleGameRadioButton");
        Assert.NotNull(simpleRadioButton);
        var generalRadioButton = window.FindControl<RadioButton>("GeneralGameRadioButton");
        Assert.NotNull(generalRadioButton);
        if (GameType.Simple == gameType)
        {
            simpleRadioButton.IsChecked = true;
            generalRadioButton.IsChecked = false;
        }
        else if (GameType.General == gameType)
        {
            simpleRadioButton.IsChecked = false;
            generalRadioButton.IsChecked = true;
        }

        // Start a new game
        window.StartNewGame(null, new RoutedEventArgs());

        // Check the game type is the same as the starting value
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(gameBoardFieldInfo);
        var gameTypeInfo = typeof(GameBoard).GetField("gameType", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(gameTypeInfo);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;
        Assert.Equal(gameType, gameTypeInfo.GetValue(gameBoard));


        // Invert the game mode selection
        if (GameType.General == gameType)
        {
            simpleRadioButton.IsChecked = true;
            generalRadioButton.IsChecked = false;
        }
        else if (GameType.Simple == gameType)
        {
            simpleRadioButton.IsChecked = false;
            generalRadioButton.IsChecked = true;
        }

        // Check the game type is the same as the starting value
        Assert.Equal(gameType, gameTypeInfo.GetValue(gameBoard));
    }

    [AvaloniaFact]
    public void TestDefaultGameModeIsSimple()
    {
        // Instantiate the game window
        var window = new MainWindow();
        window.Show();

        // Start a new game
        window.StartNewGame(null, new RoutedEventArgs());

        // Get access to variables
        var gameBoardFieldInfo =
            typeof(MainWindow).GetField("gameBoard", BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(gameBoardFieldInfo);
        var gameTypeInfo = typeof(GameBoard).GetField("gameType", BindingFlags.Instance | BindingFlags.NonPublic);
        Assert.NotNull(gameTypeInfo);
        var gameBoard = (GameBoard)gameBoardFieldInfo.GetValue(window)!;

        //Check that game type is simple
        Assert.Equal(GameType.Simple, gameTypeInfo.GetValue(gameBoard));
    }
}