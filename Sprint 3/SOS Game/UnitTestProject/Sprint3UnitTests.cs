using System.Reflection;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Headless.XUnit;
using Avalonia.Interactivity;
using SOS_Game;
using SOS_Game.Logic;

namespace UnitTestProject;

public class Sprint3UnitTests
{
    // Initially generated by ChatGPT for AC 5.1 , edited by me
    // Formerly called WinForSPlayer_SimpleGame_EndsGameAndLocksBoard by ChatGPT
[AvaloniaFact]
public void WinForSPlayer_SimpleGame()
{
    // Step 1: Instantiate and set up the game window
    var window = new MainWindow();
    window.Show();

    // Start a new game
    window.StartNewGame(null, new RoutedEventArgs());

    // Step 2: Set up player choice using reflection
    var redSChoice = typeof(MainWindow).GetField("RedSChoice", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.GetValue(window) as RadioButton;
    var redOChoice = typeof(MainWindow).GetField("RedOChoice", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.GetValue(window) as RadioButton;

    Assert.NotNull(redSChoice);
    Assert.NotNull(redOChoice);

    // Set RedSChoice to false and RedOChoice to true
    redSChoice.IsChecked = false;
    redOChoice.IsChecked = true;

    // Step 3: Access the game board grid and get the buttons using reflection
    var gameBoardGrid = window.FindControl<UniformGrid>("GameBoardGrid");
    Assert.NotNull(gameBoardGrid);

    // Step 4: Simulate button clicks to form "SOS"
    var buttons = gameBoardGrid.Children.OfType<Button>().ToArray();
    Assert.True(buttons.Length > 3); // Ensure we have enough buttons to click

    // Click the buttons in the order 0, 3, 2, 1
    // Trigger click events for each button to simulate moves (assume these events set the Content)
    foreach (var button in new[] { buttons[0], buttons[3], buttons[2], buttons[1] })
    {
        button.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));
    }

    // Step 5: Access gameBoard via reflection and check game state
    var gameBoardField = typeof(MainWindow).GetField("gameBoard", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
    Assert.NotNull(gameBoardField);
    var gameBoard = gameBoardField.GetValue(window);
    Assert.NotNull(gameBoard);

    // Check if the game is over
    var isGameOverMethod = gameBoard.GetType().GetMethod("IsGameOver", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
    Assert.NotNull(isGameOverMethod);
    bool? isGameOver = (bool?)isGameOverMethod.Invoke(gameBoard, null);
    Assert.NotNull(isGameOver);
    Assert.True(isGameOver);

    // Check the winner
    var getWinnerMethod = gameBoard.GetType().GetMethod("GetWinner", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
    Assert.NotNull(getWinnerMethod);
    var winner = getWinnerMethod.Invoke(gameBoard, null);
    Assert.Equal(Player.RedRight, winner);

    // Check the game type
    var getGameTypeMethod = gameBoard.GetType().GetMethod("GetGameType", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
    Assert.NotNull(getGameTypeMethod);
    var gameType = getGameTypeMethod.Invoke(gameBoard, null);
    Assert.Equal(GameType.Simple, gameType);

    // Additional Check: Ensure that all further moves are locked (i.e., clicking the button won't change the content)
    var initialContent = buttons[4].Content;
    buttons[4].RaiseEvent(new RoutedEventArgs(Button.ClickEvent));
    Assert.Equal(initialContent, buttons[4].Content);
    
    // Check that the winner is shown
    var winnerDisplayInfo = window.GetType().GetField("winnerDisplayInfo", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
    Assert.NotNull(winnerDisplayInfo);
    var winnerDisplay = (StackPanel?)winnerDisplayInfo.GetValue(window);
    Assert.NotNull(winnerDisplay);
    Assert.Equal(100, winnerDisplay.Opacity);

}

}