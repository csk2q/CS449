using System.Reflection;
using Avalonia.Controls;
using Avalonia.Controls.Primitives;
using Avalonia.Headless.XUnit;
using Avalonia.Interactivity;
using SOS_Game;

namespace UnitTestProject;

public class Sprint3UnitTests
{
    // Initially generated by ChatGPT for AC 5.1 , edited by me
    // Formerly called WinForSPlayer_SimpleGame_EndsGameAndLocksBoard by ChatGPT
    [AvaloniaFact]
    public void WinForSPlayer_SimpleGame()
    {
        // Step 1: Instantiate and set up the game window
        var window = new MainWindow();
        window.Show();

        // Start a new game
        window.StartNewGame(null, new RoutedEventArgs());

        // Step 2: Set up player choice using reflection
        var redSChoice =
            typeof(MainWindow).GetField("RedSChoice",
                    BindingFlags.NonPublic | BindingFlags.Instance)
                ?.GetValue(window) as RadioButton;
        var redOChoice =
            typeof(MainWindow).GetField("RedOChoice",
                    BindingFlags.NonPublic | BindingFlags.Instance)
                ?.GetValue(window) as RadioButton;

        Assert.NotNull(redSChoice);
        Assert.NotNull(redOChoice);

        // Set RedSChoice to false and RedOChoice to true
        redSChoice.IsChecked = false;
        redOChoice.IsChecked = true;

        // Step 3: Access the game board grid and get the buttons using reflection
        var gameBoardGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameBoardGrid);

        // Step 4: Simulate button clicks to form "SOS"
        var buttons = gameBoardGrid.Children.OfType<Button>().ToArray();
        Assert.True(buttons.Length > 3); // Ensure we have enough buttons to click

        // Click the buttons in the order 0, 3, 2, 1
        // Trigger click events for each button to simulate moves (assume these events set the Content)
        foreach (var button in new[] { buttons[0], buttons[3], buttons[2], buttons[1] })
            button.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));

        // Step 5: Access gameBoard via reflection and check game state
        var gameBoardField = typeof(MainWindow).GetField("gameBoard",
            BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(gameBoardField);
        var gameBoard = gameBoardField.GetValue(window);
        Assert.NotNull(gameBoard);

        // Check if the game is over
        var isGameOverMethod = gameBoard.GetType().GetMethod("IsGameOver",
            BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(isGameOverMethod);
        var isGameOver = (bool?)isGameOverMethod.Invoke(gameBoard, null);
        Assert.NotNull(isGameOver);
        Assert.True(isGameOver);

        // Check the winner
        var getWinnerMethod = gameBoard.GetType().GetMethod("GetWinner",
            BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(getWinnerMethod);
        var winner = getWinnerMethod.Invoke(gameBoard, null);
        Assert.Equal(Player.RedRight, winner);

        // Check the game type
        var getGameTypeMethod = gameBoard.GetType().GetMethod("GetGameType",
            BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(getGameTypeMethod);
        var gameType = getGameTypeMethod.Invoke(gameBoard, null);
        Assert.Equal(GameType.Simple, gameType);

        // Additional Check: Ensure that all further moves are locked (i.e., clicking the button won't change the content)
        var initialContent = buttons[4].Content;
        buttons[4].RaiseEvent(new RoutedEventArgs(Button.ClickEvent));
        Assert.Equal(initialContent, buttons[4].Content);

        // Check that the winner is shown
        var winnerDisplayInfo = window.GetType().GetField("WinnerDisplay",
            BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(winnerDisplayInfo);
        var winnerDisplay = (StackPanel?)winnerDisplayInfo.GetValue(window);
        Assert.NotNull(winnerDisplay);
        Assert.Equal(100, winnerDisplay.Opacity);
    }

    // Initially generated by ChatGPT for AC 7.2 , edited by me
    [AvaloniaFact]
    public void WinForRedPlayer_GeneralGame()
    {
        // Step 1: Instantiate and set up the game window
        var window = new MainWindow();
        window.Show();

        // Step 2: Set the game mode to GeneralGame using reflection
        var simpleGameRadioButton = typeof(MainWindow).GetField("SimpleGameRadioButton",
                BindingFlags.NonPublic | BindingFlags.Instance)
            ?.GetValue(window) as RadioButton;
        var generalGameRadioButton = typeof(MainWindow).GetField("GeneralGameRadioButton",
                BindingFlags.NonPublic | BindingFlags.Instance)
            ?.GetValue(window) as RadioButton;

        Assert.NotNull(simpleGameRadioButton);
        Assert.NotNull(generalGameRadioButton);

        // Set the General game mode
        simpleGameRadioButton.IsChecked = false;
        generalGameRadioButton.IsChecked = true;

        // Start a new game
        window.StartNewGame(null, new RoutedEventArgs());

        // Step 3: Set up player choices using reflection
        var redSChoice =
            typeof(MainWindow).GetField("RedSChoice",
                    BindingFlags.NonPublic | BindingFlags.Instance)
                ?.GetValue(window) as RadioButton;
        var redOChoice =
            typeof(MainWindow).GetField("RedOChoice",
                    BindingFlags.NonPublic | BindingFlags.Instance)
                ?.GetValue(window) as RadioButton;
        var blueSChoice =
            typeof(MainWindow).GetField("BlueSChoice",
                    BindingFlags.NonPublic | BindingFlags.Instance)
                ?.GetValue(window) as RadioButton;
        var blueOChoice =
            typeof(MainWindow).GetField("BlueOChoice",
                    BindingFlags.NonPublic | BindingFlags.Instance)
                ?.GetValue(window) as RadioButton;

        Assert.NotNull(redSChoice);
        Assert.NotNull(redOChoice);
        Assert.NotNull(blueSChoice);
        Assert.NotNull(blueOChoice);

        // Set choices for Red and Blue players
        redSChoice.IsChecked = true;
        redOChoice.IsChecked = false;
        blueSChoice.IsChecked = false;
        blueOChoice.IsChecked = true;

        // Step 4: Access the game board grid and get the buttons using reflection
        var gameBoardGrid = window.FindControl<UniformGrid>("GameBoardGrid");
        Assert.NotNull(gameBoardGrid);

        // Step 5: Simulate button clicks to form a full board with Red having more sequences
        var buttons = gameBoardGrid.Children.OfType<Button>().ToArray();
        Assert.True(buttons.Length >= 9, "Not enough buttons on the grid for the test.");

        // Click the buttons in the order 1, 0, 4, 2, 3, 7, 5, 6, 8
        foreach (var button in new[]
                 {
                     buttons[1], buttons[0], buttons[4], buttons[2], buttons[3], buttons[7], buttons[5], buttons[6],
                     buttons[8]
                 })
            button.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));

        // Step 6: Access gameBoard via reflection and check game state
        var gameBoardField = typeof(MainWindow).GetField("gameBoard",
            BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(gameBoardField);
        var gameBoard = gameBoardField.GetValue(window);
        Assert.NotNull(gameBoard);

        // Check if the game is over
        var isGameOverMethod = gameBoard.GetType().GetMethod("IsGameOver",
            BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(isGameOverMethod);
        var isGameOver = (bool?)isGameOverMethod.Invoke(gameBoard, null);
        Assert.True(isGameOver);

        // Check the winner
        var getWinnerMethod = gameBoard.GetType().GetMethod("GetWinner",
            BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(getWinnerMethod);
        var winner = getWinnerMethod.Invoke(gameBoard, null);
        Assert.Equal(Player.RedRight, winner); // Assuming "RedRight" is the correct representation of the Red player

        // Check the game type
        var getGameTypeMethod = gameBoard.GetType().GetMethod("GetGameType",
            BindingFlags.Public | BindingFlags.Instance);
        Assert.NotNull(getGameTypeMethod);
        var gameType = getGameTypeMethod.Invoke(gameBoard, null);
        Assert.Equal(GameType.General, gameType);

        // Additional Check: Ensure that all further moves are locked
        var initialContent = buttons[0].Content;
        buttons[0].RaiseEvent(new RoutedEventArgs(Button.ClickEvent));
        Assert.Equal(initialContent, buttons[0].Content);

        // Check that the winner is shown
        var winnerDisplayInfo = window.GetType().GetField("WinnerDisplay",
            BindingFlags.NonPublic | BindingFlags.Instance);
        Assert.NotNull(winnerDisplayInfo);
        var winnerDisplay = (StackPanel?)winnerDisplayInfo.GetValue(window);
        Assert.NotNull(winnerDisplay);
        Assert.Equal(100, winnerDisplay.Opacity);
    }
}